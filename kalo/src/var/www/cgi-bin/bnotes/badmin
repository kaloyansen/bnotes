#!/usr/bin/perl
# ----------------------------------------------------------------------------------------
# badmin: A PERL CGI script to administrate BSE banknotes system
# Author: Hristo Grigorov <hgrigorov@gmail.com>
# Copyright (c) 2011-2012 Busoft Engineering. All right reserved.
# ----------------------------------------------------------------------------------------
# badmin: back-office user crud operationel + user access control 
# Author: Kaloyan Krastev <kaloyansen@gmail.com>
# Copyright (c) 2022-2023 Busoft Engineering. All right reserved.
# ----------------------------------------------------------------------------------------
use strict; 
use warnings;
use CGI;
use DBH;
use Socket;
use CGI::Carp qw/fatalsToBrowser warningsToBrowser/;
use CGI::Session qw/-ip-match/;
use HTML::Template;

#################################################### logique
my $ACTION_LOGIN = "_login";
my $ACTION_LOGOUT = "_logout";
my $ACTION_DBUPDATE = "_dbupdate";
my $ACTION_DBUPDATE2 = "_dbupdate2";
my $ACTION_FUPDATE = "_flupdate";
my $ACTION_PRODUCT = "_info";
my $ACTION_USER_TABLE = "_usertable";

my $ACTION_USER_PASSWORD = "modify";
my $ACTION_USER_ACCESS = "save";
my $ACTION_USER_DELETE = "delete";
my $ACTION_USER_CREATE = "create";
my $ACTION_USER_DETAIL = "detail";
# my $ACTION_FUPDATE2 = 12;
# my $ACTION_USERDELDATE2 = 5;
# my $ACTION_USERNEWDATE2 = 8;

####################################################### front-end
my $PAGE_TOP = HTML::Template->new(filename => 'tmpl/page_top_admin.tmpl');
my $PAGE_LOGIN = HTML::Template->new(filename => 'tmpl/page_login_admin.tmpl');
my $PAGE_LOGOUT = HTML::Template->new(filename => 'tmpl/page_logout.tmpl');
my $PAGE_DBUPDATE = HTML::Template->new(filename => 'tmpl/page_dbupdate.tmpl');
my $PAGE_FUPDATE = HTML::Template->new(filename => 'tmpl/page_fupdate.tmpl');
my $PAGE_BOTTOM = HTML::Template->new(filename => 'tmpl/page_bottom_admin.tmpl');
my $PAGE_MSG = HTML::Template->new(filename => 'tmpl/page_msg_admin.tmpl');
my $PAGE_PRODUCT = HTML::Template->new(filename => 'tmpl/page_product_admin.tmpl');
my $PAGE_USER_TABLE = HTML::Template->new(filename => 'tmpl/page_user_table.tmpl');
my $PAGE_USER_DETAIL = HTML::Template->new(filename => 'tmpl/page_user_detail.tmpl');
# my $PAGE_USERS = HTML::Template->new(filename => 'tmpl/page_users_admin.tmpl');


################################################################################
# MAIN FUNCTION                                                                
################################################################################

# connect to database
DBH::db_connect();

# Limit upload to 20MB
$CGI::POST_MAX = 1024 * 20000;

my $cgi = new CGI;
#my $session = new CGI::Session("serializer:freezethaw", $cgi, {Directory=>'/tmp'}) or die CGI::Session->errstr;
my $session = new CGI::Session(undef, $cgi, {Directory=>'/tmp'}) or die CGI::Session->errstr;
my $cookie = $cgi->cookie(CGISESSID => $session->id );
#my $cookie = $cgi->cookie( -name => $session->name, -value => $session->id );

print $cgi->header(-charset => 'utf-8', -cookie=>$cookie);
#print $session->header();
# import cgi variables
my $action = $cgi->param('action');
$action = $action ? $action : $ACTION_USER_TABLE;

my $message = "Please, make sure there aren't any users working with the software before performing update!";
my $title = "SYSTEM ADMINISTRATION";
$title = "ACCESS LEVEL ADMINISTRATION" if ($action =~ m/$ACTION_USER_TABLE/);
$title = "USER DETAIL ADMINISTRATION" if ($action =~ m/$ACTION_USER_DETAIL/);

if ($action !~ m/$ACTION_LOGIN/ && !init_supersession()) {

    view_top();
    &view_msg("SUPER ACCESS DENIED", "INVALID NAME, PASSWORD OR ACCESS LEVEL!");
    $session->delete();
    exit 0;
}

# make sure user gets the login page if unauthrozied
if (!$session->param("~logged-in")) {
    $session->delete();
    $action = $ACTION_LOGIN;
}

# output top page
view_top();

# handle login action
print $PAGE_LOGIN->output  if ($action =~ m/$ACTION_LOGIN/);

# handle logout action
&view_logout() if ($action =~ m/$ACTION_LOGOUT/);

# handle db update action
print $PAGE_DBUPDATE->output if ($action =~ m/$ACTION_DBUPDATE/);

# handle file update action
print $PAGE_FUPDATE->output if ($action =~ m/$ACTION_FUPDATE/);

dbupdate() if ($action =~ m/$ACTION_DBUPDATE2/);

# handle product action
view_product() if ($action =~ m/$ACTION_PRODUCT/);

# handle user view
view_user_table() if ($action =~ m/$ACTION_USER_TABLE/);
&view_user_detail(1) if ($action =~ m/$ACTION_USER_DETAIL/);
&view_user_detail(0) if ($action =~ m/$ACTION_USER_DETAIL/);

# handle user crud
user_access() if ($action =~ m/$ACTION_USER_ACCESS/);
user_password()  if ($action =~ m/$ACTION_USER_PASSWORD/);
user_create()  if ($action =~ m/$ACTION_USER_CREATE/);
user_delete()  if ($action =~ m/$ACTION_USER_DELETE/);

# output bottom page
view_bottom();

# disconnect from database
DBH::db_disconnect();

exit 1;


################################################################################
# UTILITY FUNCTIONS
################################################################################

sub init_supersession {

    if ($session->param("~logged-in")) {
        return 1;  # if logged in, don't bother going further
    }

    my $user = $cgi->param('user') or return 1;
    my $password = $cgi->param('password') or return 1;

    # if we came this far, user did submit the login form
    # so let's try to load his/her profile if name/psswds match
    #if (auth_userr($user, $password)) {
    if (DBH::auth_superuser($user, $password)) {
        $session->expire(DBH::SUPERSESSION_EXPIRATION);
        $session->param("~user", $user);
        $session->param("~logged-in", 1);
        return 1;
    }

    return 0;
}

sub auth_user_deprecated($$) {

    my ($user, $password) = @_;

    my $result = DBH::db_select_row("SELECT * FROM USERS WHERE USER = \'$user\'");	
    my $authorized = DBH::db_select_array("SELECT COUNT(*) FROM USERS WHERE USER = \'$user\' AND PASSWORD = MD5(\'$password\')");

    if ( ($authorized) && ($result->{ADMIN} == 1) ) {
        #print STDERR "User $user authorized with password $password\n";
        return 1;
    } else {
        #print STDERR "User $user NOT authorized with password $password\n";
        return 0;
    }
}

sub view_top {

    $PAGE_TOP->param(ACTION_LOGOUT => $ACTION_LOGOUT);
    $PAGE_TOP->param(ACTION_DBUPDATE => $ACTION_DBUPDATE);
    $PAGE_TOP->param(ACTION_FUPDATE => $ACTION_FUPDATE);
    $PAGE_TOP->param(ACTION_USERS => $ACTION_USER_TABLE);
    $PAGE_TOP->param(ACTION_PRODUCT => $ACTION_PRODUCT);
    $PAGE_TOP->param(TITLE => $title);

    print $PAGE_TOP->output;
}

sub view_bottom {

    $PAGE_BOTTOM->param(MESSAGE => $message);
    print $PAGE_BOTTOM->output;

}

sub view_msg($$) {

    my ($title, $msg) = @_;

    $PAGE_MSG->param(TITLE => $title);
    $PAGE_MSG->param(MESSAGE => $msg);

    print $PAGE_MSG->output;
}

sub view_product {

    my $result = DBH::db_select_row("SELECT * FROM PRODUCT");
    my $result2 = DBH::db_select("SELECT * FROM USERS");

    $PAGE_PRODUCT->param(PRODVER => $result->{PRODVER});
    $PAGE_PRODUCT->param(DBVER => $result->{DBVER});
    $PAGE_PRODUCT->param(DBDATE => $result->{DBDATE});
    $PAGE_PRODUCT->param(IMGVER => $result->{IMGVER});
    $PAGE_PRODUCT->param(IMGDATE => $result->{IMGDATE});
    $PAGE_PRODUCT->param(LICNAME => $result->{LICNAME});
    $PAGE_PRODUCT->param(LICUSR => $result->{LICUSR});
    $PAGE_PRODUCT->param(LICUSED => scalar(@$result2));
    $PAGE_PRODUCT->param(LICDATE => $result->{LICDATE});

    print $PAGE_PRODUCT->output;

}

sub view_user_detail($) {

    my $option = shift // 1;
    my $user = $cgi->param('user');
    my $action = $ACTION_USER_PASSWORD;
    my $message = 'modify user password';
    my $usereadonly = 'readonly';
    if ($option == 0) {
        $user = '';
        $action = $ACTION_USER_CREATE;
        $message = 'create new user';
        $usereadonly = '';
    }

    $PAGE_USER_DETAIL->param(MESSAGE => $message);
    $PAGE_USER_DETAIL->param(USER => $user);
    $PAGE_USER_DETAIL->param(USEREADONLY => $usereadonly);
    $PAGE_USER_DETAIL->param(PASSWORD => '');
    $PAGE_USER_DETAIL->param(ACTION => $action);

    print $PAGE_USER_DETAIL->output;
}

sub view_user_table {

    my $user_data = DBH::db_select("SELECT * FROM USERS");

    my @loop1;
    foreach my $result ( @$user_data ) {

        my $admin = $result->{ADMIN};
        
        my %row = (
            ID       => $result->{ID},
            USER     => $result->{USER},
            LOCKED   => $result->{LOCKED} ? "checked" : "",
            ACTIVE   => $result->{ACTIVE} ? "checked" : "",
            ADROW    => $admin, # ? "checked" : "",
            ADMIN    => $admin & DBH::control('ADM') ? "checked" : "",
            ADBGN    => $admin & DBH::control('BGN') ? "checked" : "",
            ADCAD    => $admin & DBH::control('CAD') ? "checked" : "",
            ADCHF    => $admin & DBH::control('CHF') ? "checked" : "",
            ADDKK    => $admin & DBH::control('DKK') ? "checked" : "",
            ADUSD    => $admin & DBH::control('USD') ? "checked" : "",
            ADTRY    => $admin & DBH::control('TRY') ? "checked" : "",
            ADEUR    => $admin & DBH::control('EUR') ? "checked" : "",
            ADGBP    => $admin & DBH::control('GBP') ? "checked" : "",
            ADNOK    => $admin & DBH::control('NOK') ? "checked" : "",
            ADRUB    => $admin & DBH::control('RUB') ? "checked" : "",
            CURRENCY => $result->{CURRENCY},
            CREATED  => $result->{CREATED},
            LOGGED   => $result->{LOGGED},
            SESSIONS => $result->{SESSIONS},
            ACTUP    => $ACTION_USER_ACCESS,
            ACTDEL   => $ACTION_USER_DELETE,
            ACTDET   => $ACTION_USER_DETAIL );

        push(@loop1, \%row);
    }

    $PAGE_USER_TABLE->param(LOOP_1 => \@loop1);
    print $PAGE_USER_TABLE->output;
}

sub view_users { # deprecated

    my $results1 = DBH::db_select("SELECT * FROM USERS");

    my @loop1;
    foreach my $result ( @$results1 ) {

        my %row = (
            ID       => $result->{ID},
            USER     => $result->{USER},
            LOCKED   => $result->{LOCKED} ? "checked" : "",
            ACTIVE   => $result->{ACTIVE} ? "checked" : "",
            ADMIN    => $result->{ADMIN} ? "checked" : "",
            CURRENCY => $result->{CURRENCY},
            CREATED  => $result->{CREATED},
            LOGGED   => $result->{LOGGED},
            SESSIONS => $result->{SESSIONS}
            );

        push(@loop1, \%row);
    }

    $PAGE_USER_TABLE->param(LOOP_1 => \@loop1);

    print $PAGE_USER_TABLE->output;

}

sub view_logout() {

    my $user = $session->param("~user");
    $session->delete();
    DBH::db_update_column('ACTIVE', 0, $user);

    $PAGE_LOGOUT->param(USER => $user);
    print $PAGE_LOGOUT->output;
}

sub save_users {

    my @items = param('hristo');
    foreach my $item (@items) {
    }	

}

sub dbupdate {

    my $db_user = $cgi->param('user');
    my $db_passwd = $cgi->param('password');
    my $db_file = $cgi->param('sqlfile');

    my $upload_dir = "/tmp";
    my $upload_filehandle = $cgi->upload('sqlfile');

    # dump stream to file
    my $update_file = "$upload_dir/$db_file";
    open (UPLOADFILE, ">$update_file") or die "$!";
    binmode UPLOADFILE;
    while (<$upload_filehandle>) { print UPLOADFILE; }
    close UPLOADFILE;

    # call mysql to import data
    system("/usr/bin/mysql --user=$db_user --password=$db_passwd CURRENCY < $update_file");

    if ($? != 0)  {
        view_msg("UPDATE", "ERROR ($?) WHILE UPDATING!");
    }

    unlink("$update_file");

    view_msg("UPDATE", "DATA SUCCESSFULLY UPDATED!");
}

sub user_create {

    my $user = $cgi->param('user');
    my $pass = $cgi->param('password');
    if ($user && $pass) {

        $message = DBH::db_insert($user, $pass);
        view_user_table();
    } else {

        $message = 'create new user aborted - input not good - try again';
        view_user_detail(0);
    }
}

sub user_password {

    my $user = $cgi->param('user');
    my $pass = $cgi->param('password');    
    if ($user && $pass) {

        $message = DBH::db_update("UPDATE USERS SET PASSWORD = MD5(\'$pass\') WHERE USER LIKE \'$user\'");
        view_msg("CHANGE USER PASSWORD", "USER $user PASSWORD IS CHANGED");
    } else {

        $message = 'update user password aborted - input not good - try again';
        view_user_detail(1);        
    }
}

sub user_access {

    my $user = $cgi->param('user');
    my $admin = 0;
    my %code = DBH::control('all');
    while( my ($clef, $value) = each(%code) ) {

        $admin += $cgi->param($clef) ? $value : 0;
    }

    $message = DBH::db_update_column('ADMIN', $admin, $user);
    view_user_table();
}

sub user_delete {

    my $user = $cgi->param('user');
    $message = DBH::db_delete($user);
    view_user_table();
}

