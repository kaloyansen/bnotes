#!/usr/bin/perl
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# badmin: A PERL CGI script to administrate BSE banknotes system                        #
# Author: Hristo Grigorov <hgrigorov@gmail.com>                                         #
# Copyright (c) 2011-2012 Busoft Engineering. All right reserved.                       #
# ------------------------------------------------------------------------------------- #
# badmin: back-office create/read/update/delete user and user access control                                 #
# Author: Kaloyan Krastev <kaloyansen@gmail.com>                                        #
# Copyright (c) 2022-2023 Busoft Engineering. All right reserved.                       #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

use strict; 
use warnings;

use CGI;
use CGI::Carp qw/fatalsToBrowser warningsToBrowser/;
use CGI::Session qw/-ip-match/;
# use Socket;
use HTML::Template;
use DBH;

use constant ACTION_ACCESS => 'save';
use constant ACTION_CANCEL => 'cancel';
use constant ACTION_CONTROL => 'control';
use constant ACTION_CREATE => 'new';
use constant ACTION_CREATE_SUBMIT => 'create';
use constant ACTION_DBUPDATE => '_dbupform';
use constant ACTION_DBUPDATE_SUBMIT => 'updatabase';
use constant ACTION_DELETE => 'delete';
use constant ACTION_DELETE_SUBMIT => 'confirm';
use constant ACTION_DETAIL => 'detail';
use constant ACTION_FUPDATE => '_flupdate';
use constant ACTION_FUPDATE_SUBMIT => '_flupsub';
use constant ACTION_LOGIN => 'login';
use constant ACTION_LOGOUT => '_logout';
use constant ACTION_MESSAGE => 'message';
use constant ACTION_PASSWORD => 'modify';
use constant ACTION_PRODUCT => 'about';
use constant ACTION_TABLE => 'table';

################################################################################
# static templates
################################################################################

my $PAGE_BOTTOM = HTML::Template->new(filename => 'tmpl/page_bottom_admin.tmpl');
my $PAGE_CONFIRMATION = HTML::Template->new(filename => 'tmpl/page_confirmation.tmpl');
my $PAGE_DBUPDATE = HTML::Template->new(filename => 'tmpl/page_dbupdate.tmpl');
my $PAGE_FUPDATE = HTML::Template->new(filename => 'tmpl/page_fupdate.tmpl');
my $PAGE_LOGIN = HTML::Template->new(filename => 'tmpl/page_login_admin.tmpl');
my $PAGE_LOGOUT = HTML::Template->new(filename => 'tmpl/page_logout.tmpl');
my $PAGE_MSG = HTML::Template->new(filename => 'tmpl/page_msg_admin.tmpl');
my $PAGE_PRODUCT = HTML::Template->new(filename => 'tmpl/page_product.tmpl');
my $PAGE_TABLE = HTML::Template->new(filename => 'tmpl/page_table.tmpl');
my $PAGE_TOP = HTML::Template->new(filename => 'tmpl/page_top_admin.tmpl');
my $PAGE_USER = HTML::Template->new(filename => 'tmpl/page_user.tmpl');

################################################################################
# MAIN FUNCTION                                                                
################################################################################

DBH::db_connect(); # powered by DBH.pm

$CGI::POST_MAX = 1024 * 20000; # Limit upload to 20MB
my $cgi = new CGI;
my $session = new CGI::Session(undef, $cgi, {Directory=>'/tmp'}) or die CGI::Session->errstr;
print $session->header(-charset => 'utf-8');

#my $session = new CGI::Session("serializer:freezethaw", $cgi, {Directory=>'/tmp'}) or die CGI::Session->errstr;
#my $cookie = $cgi->cookie( -name => $session->name, -value => $session->id );
#my $cookie = $cgi->cookie(CGISESSID => $session->id );
#print $cgi->header(-charset => 'utf-8', -cookie=>$cookie);

my $action = $cgi->param('action') // ACTION_LOGIN;
my $title = "SYSTEM ADMINISTRATION";
my $message = "please, make sure there aren't any users working with the software before performing update!";
my $user = 0;
my $color = 'black';

$title = "USER ACCESS CONTROL" if ($action =~ ACTION_TABLE || $action =~ ACTION_ACCESS || $action =~ ACTION_CANCEL);
$title = "USER ADMINISTRATION" if ($action =~ ACTION_DELETE || $action =~ ACTION_CREATE);
$title = "USER ADMINISTRATION CONFIRMATION" if ($action =~ ACTION_DELETE_SUBMIT || $action =~ ACTION_CREATE_SUBMIT);
$title = "USER DETAIL ADMINISTRATION" if $action =~ ACTION_DETAIL;

$message = 'activate access control to control user access' if not DBH::db_toggle_status(DBH::paraname());
$message = 'action cancelled' if $action =~ ACTION_CANCEL;

if (init_supersession()) {

    if ($session->param("~logged-in")) { # allow action if user is authorised

        $user = $session->param("~user");
        $message = "superuser: $user; $message";
        $color = 'blue';
        $action = $action;
    } else { # user gets the login page if unauthorised
        
        $action = ACTION_LOGIN;
        $session->delete();
        $title = "SUPERACCESS";
        $message = 'login needed for superuser access';
        $color = 'orange';
    }
} else { # user gets the error page if access is denied

    $session->delete();

    $title = "SUPERACCESS DENIED";
    $message = "INVALID NAME, PASSWORD OR ACCESS LEVEL!";
    $color = 'red';
    $action = ACTION_MESSAGE;
}


view_top();

view_message() if $action =~ ACTION_MESSAGE;
view_login(ACTION_LOGIN) if $action =~ ACTION_LOGIN;
view_logout() if $action =~ ACTION_LOGOUT;

view_dbupdate(ACTION_DBUPDATE_SUBMIT) if $action =~ ACTION_DBUPDATE;
dbupdate() if $action =~ ACTION_DBUPDATE_SUBMIT;

view_fupdate(ACTION_FUPDATE_SUBMIT) if $action =~ ACTION_FUPDATE;
fupdate() if $action =~ ACTION_FUPDATE_SUBMIT;

view_product() if $action =~ ACTION_PRODUCT;
view_table() if $action =~ ACTION_TABLE;
view_table() if $action =~ ACTION_CANCEL;
view_user(0) if $action =~ ACTION_CREATE;
view_user(1) if $action =~ ACTION_DETAIL;
update_user_access() if $action =~ ACTION_ACCESS;
update_user_password() if $action =~ ACTION_PASSWORD;
create_user() if $action =~ ACTION_CREATE_SUBMIT;
toggle_control() if $action =~ ACTION_CONTROL;

view_confirmation('really delete user?', ACTION_DELETE_SUBMIT) if $action =~ ACTION_DELETE;
delete_user() if $action =~ ACTION_DELETE_SUBMIT;

view_bottom();

DBH::db_disconnect();# disconnect from database

exit 0;


################################################################################
# UTILITY FUNCTIONS
################################################################################

sub init_supersession {

    if ($session->param("~logged-in")) {
        return 1;  # if logged in, don't bother going further
    }

    my $user = $cgi->param('user') or return 1;
    my $password = $cgi->param('password') or return 1;

    if (DBH::auth_superuser($user, $password)) {

        $session->expire(DBH::SUPERSESSION_EXPIRATION);
        $session->param("~user", $user);
        $session->param("~logged-in", 1);
        $message = DBH::db_update_column('ACTIVE', 1, $user) ? "$user is active" : 'zero';
        $action = ACTION_TABLE;
        return 1;
    }

    return 0;
}

sub auth_user_deprecated($$) {

    my ($user, $password) = @_;

    my $result = DBH::db_select_row("SELECT * FROM USERS WHERE USER = \'$user\'");	
    my $authorized = DBH::db_select_array("SELECT COUNT(*) FROM USERS WHERE USER = \'$user\' AND PASSWORD = MD5(\'$password\')");

    if ( ($authorized) && ($result->{ADMIN} == 1) ) {
        #print STDERR "User $user authorized with password $password\n";
        return 1;
    } else {
        #print STDERR "User $user NOT authorized with password $password\n";
        return 0;
    }
}

sub view_login {

    $action = shift;
    $PAGE_LOGIN->param(ACTION => $action);
    print $PAGE_LOGIN->output;
}

sub view_top {

    $PAGE_TOP->param(ACTION_LOGOUT => ACTION_LOGOUT);
    $PAGE_TOP->param(ACTION_DBUPDATE => ACTION_DBUPDATE);
    $PAGE_TOP->param(ACTION_FUPDATE => ACTION_FUPDATE);
    $PAGE_TOP->param(ACTION_TABLE => ACTION_TABLE);
    $PAGE_TOP->param(ACTION_PRODUCT => ACTION_PRODUCT);
    $PAGE_TOP->param(TITLE => $title);

    print $PAGE_TOP->output;
}

sub view_bottom {

    $PAGE_BOTTOM->param(MESSAGE => $message);
    $PAGE_BOTTOM->param(COLOR => $color);
    print $PAGE_BOTTOM->output;

}

sub view_message {
    
    view_msg($title, $message);
}

sub view_msg($$) {

    my ($title, $msg) = @_;

    $PAGE_MSG->param(TITLE => $title);
    $PAGE_MSG->param(MESSAGE => $msg);

    print $PAGE_MSG->output;
}

sub view_product {

    my $result = DBH::db_select_row("SELECT * FROM PRODUCT");
    my $result2 = DBH::db_select("SELECT * FROM USERS");

    $PAGE_PRODUCT->param(PRODVER => $result->{PRODVER});
    $PAGE_PRODUCT->param(DBVER => $result->{DBVER});
    $PAGE_PRODUCT->param(DBDATE => $result->{DBDATE});
    $PAGE_PRODUCT->param(IMGVER => $result->{IMGVER});
    $PAGE_PRODUCT->param(IMGDATE => $result->{IMGDATE});
    $PAGE_PRODUCT->param(LICNAME => $result->{LICNAME});
    $PAGE_PRODUCT->param(LICUSR => $result->{LICUSR});
    $PAGE_PRODUCT->param(LICUSED => scalar(@$result2));
    $PAGE_PRODUCT->param(LICDATE => $result->{LICDATE});

    print $PAGE_PRODUCT->output;

}

sub view_user {

    my $option = shift // 1;

    my $user = $cgi->param('user');
    my $action = ACTION_PASSWORD;
    my $message = 'modify user password';
    my $usereadonly = 'readonly';
    my $class = 'read';

    if ($option == 0) { # new user
        $user = '';
        $action = ACTION_CREATE_SUBMIT;
        $message = 'create new user';
        $usereadonly = '';
        $class = 'write';
    }

    $PAGE_USER->param(MESSAGE => $message);
    $PAGE_USER->param(USER => $user);
    $PAGE_USER->param(USEREADONLY => $usereadonly);
    $PAGE_USER->param(CLASS => $class);
    $PAGE_USER->param(PASSWORD => '');
    $PAGE_USER->param(ACTION => $action);
    $PAGE_USER->param(CANCEL => ACTION_CANCEL);

    print $PAGE_USER->output;
}

sub view_confirmation {

    my ($mes, $action) = @_;
    my $user = $cgi->param('user');

    #$PAGE_CONFIRMATION->param(MESSAGE => $mes);
    $PAGE_CONFIRMATION->param(ACTION => $action);
    $PAGE_CONFIRMATION->param(CANCEL => ACTION_CANCEL);
    $PAGE_CONFIRMATION->param(USER => $user);
    
    $message = "conformation delete $user"; 
    print $PAGE_CONFIRMATION->output;
}

sub view_table {

    my $ilabel = 'user access is out of control - enable control as soon as possible, ...';
    my $icon = '#f66';
    my $border = 1;
    if (DBH::db_toggle_status(DBH::paraname())) {

        $ilabel = 'user access control is running ...';
        $icon = '#efe';
        $border = 1;
    }

    my @loop1;
    my $user_data = DBH::db_select("SELECT * FROM USERS");
    foreach my $result ( @$user_data ) {

        my $admin = $result->{ADMIN};
        
        my %row = (
            ID       => $result->{ID},
            USER     => $result->{USER},
            LOCKED   => $result->{LOCKED} ? "checked" : "",
            ACTIVE   => $result->{ACTIVE} ? "checked" : "",
            ADROW    => $admin,
            ADMIN    => $admin & DBH::control('ADM') ? "checked" : "",
            ADBGN    => $admin & DBH::control('BGN') ? "checked" : "",
            ADCAD    => $admin & DBH::control('CAD') ? "checked" : "",
            ADCHF    => $admin & DBH::control('CHF') ? "checked" : "",
            ADDKK    => $admin & DBH::control('DKK') ? "checked" : "",
            ADUSD    => $admin & DBH::control('USD') ? "checked" : "",
            ADTRY    => $admin & DBH::control('TRY') ? "checked" : "",
            ADEUR    => $admin & DBH::control('EUR') ? "checked" : "",
            ADGBP    => $admin & DBH::control('GBP') ? "checked" : "",
            ADNOK    => $admin & DBH::control('NOK') ? "checked" : "",
            ADRUB    => $admin & DBH::control('RUB') ? "checked" : "",
            ADB11    => $admin & DBH::control('B11') ? "checked" : "",
            ADB12    => $admin & DBH::control('B12') ? "checked" : "",
            ADB13    => $admin & DBH::control('B13') ? "checked" : "",
            ADB14    => $admin & DBH::control('B14') ? "checked" : "",
            ADFOX    => $admin & DBH::control('FOX') ? "checked" : "",
            CURRENCY => $result->{CURRENCY},
            CREATED  => $result->{CREATED},
            LOGGED   => $result->{LOGGED},
            SESSIONS => $result->{SESSIONS},
            ACTUP    => ACTION_ACCESS,
            ACTDEL   => ACTION_DELETE,
            ACTDET   => ACTION_DETAIL );

        push(@loop1, \%row);
    }

    $PAGE_TABLE->param(LOOP_1 => \@loop1);
    $PAGE_TABLE->param(ACTNEW => ACTION_CREATE);
    $PAGE_TABLE->param(IACTION => ACTION_CONTROL);
    $PAGE_TABLE->param(ILABEL => $ilabel);
    $PAGE_TABLE->param(ICON => $icon);
    $PAGE_TABLE->param(BORDER => $border);

    print $PAGE_TABLE->output;
}

sub view_users_is_now_deprecated { # see view_table

    my $results1 = DBH::db_select("SELECT * FROM USERS");

    my @loop1;
    foreach my $result ( @$results1 ) {

        my %row = (
            ID       => $result->{ID},
            USER     => $result->{USER},
            LOCKED   => $result->{LOCKED} ? "checked" : "",
            ACTIVE   => $result->{ACTIVE} ? "checked" : "",
            ADMIN    => $result->{ADMIN} ? "checked" : "",
            CURRENCY => $result->{CURRENCY},
            CREATED  => $result->{CREATED},
            LOGGED   => $result->{LOGGED},
            SESSIONS => $result->{SESSIONS}
            );

        push(@loop1, \%row);
    }

    $PAGE_TABLE->param(LOOP_1 => \@loop1);

    print $PAGE_TABLE->output;

}

sub view_logout {

    my $user = $session->param("~user");
    $session->delete();
    DBH::db_update_column('ACTIVE', 0, $user);

    $PAGE_LOGOUT->param(USER => $user);
    print $PAGE_LOGOUT->output;
}

sub view_fupdate {

    my $action = shift;
    $PAGE_FUPDATE->param(ACTION => $action);
    print $PAGE_FUPDATE->output;
} 

sub view_dbupdate {

    my $action = shift;
    $PAGE_DBUPDATE->param(ACTION => $action);
    print $PAGE_DBUPDATE->output;
}

sub save_users {

    my @items = param('hristo');
    foreach my $item (@items) {
    }   

}

sub fupdate {

    # to do
    return;
}

sub dbupdate { # we can send sql scripts to the database

    my $db_user = $cgi->param('user');
    my $db_passwd = $cgi->param('password');
    my $db_file = $cgi->param('sqlfile');

    my $upload_dir = "/tmp";
    my $upload_filehandle = $cgi->upload('sqlfile');

    # dump stream to file
    my $update_file = "$upload_dir/$db_file";
    open (UPLOADFILE, ">$update_file") or die "$!";
    binmode UPLOADFILE;
    while (<$upload_filehandle>) { print UPLOADFILE; }
    close UPLOADFILE;

    # call mysql to import data
    system("/usr/bin/mysql --user=$db_user --password=$db_passwd CURRENCY < $update_file");

    if ($? != 0)  {
        view_msg("UPDATE", "ERROR ($?) WHILE UPDATING!");
    }

    unlink("$update_file");

    $title = 'UPDATE';
    $message = "DATA SUCCESSFULLY UPDATED!";
    $color = 'blue';
    view_message();
}

sub update_user_password {

    my $user = $cgi->param('user');
    my $pass = $cgi->param('password');    
    if ($user && $pass) {

        $message = DBH::db_update("UPDATE USERS SET PASSWORD = MD5(\'$pass\') WHERE USER LIKE \'$user\'") ?
                   "user $user password updated" : 'zero';
        $color = 'blue';
        view_table();
    } else {

        $message = 'update user password aborted - input not good - try again';
        $color = 'red';
        view_user(1);        
    }
}

sub update_user_access {

    my $user = $cgi->param('user');
    my $admin = 0;
    my %code = DBH::control('all');
    while( my ($clef, $value) = each(%code) ) {

        $admin += $cgi->param($clef) ? $value : 0;
    }

    $message = DBH::db_update_column('ADMIN', $admin, $user) ? "user $user access updated to $admin" : 'zero';
    $color = 'blue';
    view_table();
}

sub create_user {

    my $user = $cgi->param('user');
    my $pass = $cgi->param('password');
    if ($user && $pass) {

        $message = DBH::db_insert($user, $pass) ? "user $user created" : 'zero';
        view_table();
    } else {

        $color = 'red';
        $message = 'create new user aborted - input not good - try again';
        view_user(0);
    }
}

sub toggle_control {

    $color = 'blue';
    $message = 'user access control is disabled';
    if (DBH::db_toggle(DBH::paraname())) {

        $color = 'green';
        $message = "user access control is active";
    }

    view_table();
}

sub delete_user {

    my $user = $cgi->param('user');
    if ($user) {

        $message = DBH::db_delete($user) ? "user $user deleted" : 'zero';
        $color = 'blue';
    } else {

        $color = 'red';
        $message = "user $user not defined";
    }

    view_table();
}

