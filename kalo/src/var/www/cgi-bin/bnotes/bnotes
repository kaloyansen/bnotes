#!/usr/bin/perl
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# BNOTES: A PERL CGI script to generate HTML pages for BSE banknotes system             #
# Author: Hristo Grigorov <hgrigorov@gmail.com>                                         #
# Copyright (c) 2011-2012 Busoft Engineering. All right reserved.                       #
# ------------------------------------------------------------------------------------- #
# BNOTES: User access control for BSE banknotes system                                  #
# Author: Kaloyan Krastev <kaloyansen@gmail.com>                                        #
# Copyright (c) 2022-2023 Busoft Engineering. All right reserved.                       #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

use strict; 
use warnings;
use CGI;
use DBH;
use CGI::Carp qw/fatalsToBrowser warningsToBrowser/;
use CGI::Session qw/-ip-match/;
use HTML::Template;
use constant CONTACT_ADDRESS => "support\@bse.bg";
use constant ACTION_ABOUT => 'about';
use constant ACTION_COUNTRIES => 'countries';
use constant ACTION_FAKE => 'fake';
use constant ACTION_FIND => 'find';
use constant ACTION_INFO => 'info';
use constant ACTION_INFO_FAKE => 'ifake';
use constant ACTION_LIBRARY => 'library';
use constant ACTION_LOGIN => 'logform';
use constant ACTION_LOGIN_SUBMIT => 'login';
use constant ACTION_LOGOUT => 'logout';
use constant ACTION_NEWS => 'news';
use constant ACTION_PREVIEW => 'preview';
use constant ACTION_PREVIEW_FAKE => 'pfake';
use constant ACTION_VALUTE => 'valute';

use constant STATUS_BAD_INPUT => 400;
use constant STATUS_GUEST => 340;
use constant STATUS_LOGIN_FAILED => 500;
use constant STATUS_LOGIN_SUCCESS => 200;
use constant STATUS_USER => 351;

################################################################################
# front-end static templates
################################################################################

my $PAGE_ABOUT = HTML::Template->new(filename => 'tmpl/page_about.tmpl');
my $PAGE_BOTTOM = HTML::Template->new(filename => 'tmpl/page_bottom.tmpl');
my $PAGE_COUNTRIES = HTML::Template->new(filename => 'tmpl/page_countries.tmpl');
my $PAGE_FAKE = HTML::Template->new(filename => 'tmpl/page_fake.tmpl');
my $PAGE_FIND = HTML::Template->new(filename => 'tmpl/page_find.tmpl');
my $PAGE_INFOFAKE = HTML::Template->new(filename => 'tmpl/page_info_fake.tmpl');
my $PAGE_INFO = HTML::Template->new(filename => 'tmpl/page_info.tmpl');
my $PAGE_LIBRARY = HTML::Template->new(filename => 'tmpl/page_library.tmpl');
my $PAGE_LOGIN = HTML::Template->new(filename => 'tmpl/page_login.tmpl');
my $PAGE_LOGOUT = HTML::Template->new(filename => 'tmpl/page_logout.tmpl');
# my $PAGE_MAIN = HTML::Template->new(filename => 'tmpl/page_main.tmpl');
my $PAGE_MSG = HTML::Template->new(filename => 'tmpl/page_msg.tmpl');
my $PAGE_NEWS = HTML::Template->new(filename => 'tmpl/page_news.tmpl');
my $PAGE_PREVIEW =  HTML::Template->new(filename => 'tmpl/page_preview.tmpl');
my $PAGE_PREVIEW_FAKE = HTML::Template->new(filename => 'tmpl/page_preview_fake.tmpl');
my $PAGE_TOP = HTML::Template->new(filename => 'tmpl/page_top.tmpl');
my $PAGE_TOP_SMALL =  HTML::Template->new(filename => 'tmpl/page_top_small.tmpl');
my $PAGE_VALUTE = HTML::Template->new(filename => 'tmpl/page_valute.tmpl');


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# MAIN FUNCTION                                                               #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

#DBH::db_connect();# powered by DBH.pm

my $cgi = new CGI;# do some CGI stuff
my $session = new CGI::Session(undef, $cgi, {Directory=>'/tmp'}) or die CGI::Session->errstr;

print $session->header(-charset => 'utf-8');

# import cgi variables
my $cid = $cgi->param('cid');
my $bid = $cgi->param('bid');
my $fbid = $cgi->param('fbid');
my $fbox = $cgi->param('fbox');
my $fpic = $cgi->param('fpic');
my $infoid = $cgi->param('infoid');
my $pageid = $cgi->param('pageid');
my $strfind = $cgi->param('textfield');
my $action = $cgi->param('action') // ACTION_ABOUT;

my $client = 0;
my $access = 0;
my $status = init_session();
my $title = 0;

DBH::db_connect();# powered by DBH.pm

my $message = 0;
my $filter_by_country = 1; # control access by country
my $filter_fake = 1; # control access counterfeit
my $default_access = DBH::control('BGN') | DBH::control('USD');

# $message = DBH::now(); #$client ? " Welcome $client" : $title;

# output top page 
my $has_top = 1;
if (needs_top()) {
    view_top();
} elsif (needs_top_small()) {
    view_top_small();
} else {
    $has_top = 0;
}

view_login(ACTION_LOGIN_SUBMIT) if ($action =~ ACTION_LOGIN);
login() if ($action =~ ACTION_LOGIN_SUBMIT);

view_logout() if ($action =~ ACTION_LOGOUT);
view_about() if ($action =~ ACTION_ABOUT);
view_news() if ($action =~ ACTION_NEWS);
view_library() if ($action =~ ACTION_LIBRARY);
view_find() if ($action =~ ACTION_FIND);
view_countries() if ($action =~ ACTION_COUNTRIES);
view_valute() if ($action =~ ACTION_VALUTE);
view_info() if ($action =~ ACTION_INFO);
view_fake() if ($action =~ ACTION_FAKE);
view_info_fake() if ($action =~ ACTION_INFO_FAKE);
view_preview() if ($action =~ ACTION_PREVIEW);
view_preview_fake() if ($action =~ ACTION_PREVIEW_FAKE);

my $has_bottom = $has_top ? view_bottom() : 0;

DBH::db_disconnect();# disconnect database

exit 1;


################################################################################
# UTILITY FUNCTIONS
################################################################################

sub view_login {

    my $logaction = shift;
    $PAGE_LOGIN->param(ACTION => $logaction);
    $PAGE_LOGIN->param(FPWEMAIL => CONTACT_ADDRESS);
    print $PAGE_LOGIN->output;
}

sub view_logout {

    $session->delete();
    DBH::db_update_column('ACTIVE', 0, $client);

    $PAGE_LOGOUT->param(USER => $client);
    print $PAGE_LOGOUT->output;
}

sub view_top {

    my $actilog = ACTION_LOGIN;
    my $labelog = 'LOG IN';
    if ($client) {

        $actilog = ACTION_LOGOUT;
        $labelog = "$client: $access";
    }


    $PAGE_TOP->param(ACTION_COUNTRIES => ACTION_COUNTRIES);
    $PAGE_TOP->param(ACTION_ABOUT => ACTION_ABOUT);
    $PAGE_TOP->param(ACTION_LIBRARY => ACTION_LIBRARY);
    $PAGE_TOP->param(ACTION_NEWS => ACTION_NEWS);
    $PAGE_TOP->param(ACTION_LOG => $actilog);
    $PAGE_TOP->param(LOG_LABEL => $labelog);

    print $PAGE_TOP->output;
}

sub view_bottom {

    $message = $message ? $message : '';

    my $actilog = ACTION_LOGIN;
    my $labelog = 'LOG IN';
    if ($client) {

        $actilog = ACTION_LOGOUT;
        $labelog = "$client: $access";
    }

    $PAGE_BOTTOM->param(ACTION_LIBRARY => ACTION_LIBRARY);
    $PAGE_BOTTOM->param(ACTION_ABOUT => ACTION_ABOUT);
    $PAGE_BOTTOM->param(ACTION_NEWS => ACTION_NEWS);
    $PAGE_BOTTOM->param(ACTION_LOG => $actilog);
    $PAGE_BOTTOM->param(ACTION_LABEL => $labelog);
    $PAGE_BOTTOM->param(MESSAGE => $message);

    print $PAGE_BOTTOM->output;
    
    return 1;
}

sub view_top_small {

    my $where = '';
    if ($filter_by_country) {

        $access = $access ? $access : $default_access;
        #$access |= DBH::control('EUR');
        # $access = DBH::control('USD') & DBH::control('EUR');
        $where = sql_access_filter($access);
    }

    my $results = DBH::db_select("SELECT * FROM COUNTRY $where ORDER BY BCODEVAL");
    my $buf;

    foreach my $result ( @$results ) {
        my $BCODEVAL = $result->{BCODEVAL};
        my $COUNTRY  = $result->{COUNTRY};
        my $actstr = ACTION_COUNTRIES;
        my $stropt = "\"/cgi-bin/bnotes/bnotes?action=$actstr\&amp;cid=$BCODEVAL\"";
        
        my $option = "<option %SELECTED% value=$stropt>$BCODEVAL - $COUNTRY</option>\n";
        if ($BCODEVAL eq uc($cid)) {
            $option =~ s/%SELECTED%/selected/g;
        } else {
            $option =~ s/%SELECTED%//g;
        }

        $buf = $buf . $option;
    }

    $PAGE_TOP_SMALL->param(OPTIONS => $buf);
    $PAGE_TOP_SMALL->param(ACTION_FIND => ACTION_FIND);

    print $PAGE_TOP_SMALL->output;

}

sub view_find {

    my $results1 = DBH::db_select("SELECT *  FROM COUNTRY WHERE BCODEVAL LIKE \"%$strfind%\" OR CURRENCY LIKE \"%$strfind%\" OR COINNAME LIKE \"%$strfind%\" OR COUNTRY LIKE \"%$strfind%\"");

    my @loop1;
    foreach my $result ( @$results1 ) {

        my $minfo =  normalize_text($result->{MINFO});
        #$minfo =~ s/%NL%/<br \/>/g;

        my %row = (    
            COUNTRY_CODE => lc($result->{BCODEVAL}),
            BCODEVAL  => $result->{BCODEVAL},
            COUNTRY   => uc($result->{COUNTRY}),
            CURRENCY  => $result->{CURRENCY}, 
            COINNAME  => $result->{COINNAME},
            EBANKNAME => $result->{EBANKNAME},
            MINFO     => $minfo,
            ACTION_COUNTRIES => ACTION_COUNTRIES
            );

        push(@loop1, \%row);
    }

    $PAGE_FIND->param(LOOP_1 => \@loop1);
    $PAGE_FIND->param(STRFIND => $strfind);

    print $PAGE_FIND->output;
}

sub view_countries {

    my $results1 = DBH::db_select("SELECT * FROM BNOTES WHERE BCODE = \'$cid\' ORDER BY NOMINAL");
    my $results2 = DBH::db_select_row("SELECT * FROM COUNTRY WHERE BCODEVAL = \'$cid\'");

    my @v_loop;

    foreach my $result ( @$results1 ) {

        my $bfalse = "";

        $bfalse = "2" if ($result->{BFALSE} && access_fake());


        my $ysimg = "";
        $ysimg = "1" if ($result->{YSTOPPED} eq "");

        my $ystopped = $result->{YSTOPPED};
        $ystopped = $ystopped . " Ð³." if ($ystopped ne "");

        my $bfront = "blank.jpg";
        $bfront = $result->{BFRONT} if ($result->{BFRONT} ne "");

        my $bback = "blank.jpg";
        $bback = $result->{BBACK} if ($result->{BBACK} ne "");

        my %v_row = ( COUNTRY_CODE => lc($cid),
                      BFRONT   => lc($bfront),
                      BBACK    => lc($bback),
                      NUMB     => $result->{NUMB},
                      NOMINAL  => $result->{NOMINAL},
                      BCODE    => $result->{BCODE},
                      EMISSION => $result->{EMISSION},
                      SVERSION => $result->{SVERSION},
                      ACTION_VALUTE => ACTION_VALUTE,
                      YSIMG    => $ysimg,
                      YSTOPPED => $ystopped,
                      BFALSE   => $bfalse
            );

        push(@v_loop, \%v_row);
    }

    my $minfo = normalize_text($results2->{MINFO});
    #$minfo =~ s/%NL%/<br \/>/g;
    $PAGE_COUNTRIES->param(valutes_loop => \@v_loop);
    $PAGE_COUNTRIES->param(COUNTRY_CODE => lc($cid));
    $PAGE_COUNTRIES->param(COUNTRY_NAME => $results2->{COUNTRY});
    $PAGE_COUNTRIES->param(CURRENCY => $results2->{CURRENCY});
    $PAGE_COUNTRIES->param(COINNAME => $results2->{COINNAME});
    $PAGE_COUNTRIES->param(EBANKNAME => $results2->{EBANKNAME});
    $PAGE_COUNTRIES->param(MINFO => $minfo);

    print $PAGE_COUNTRIES->output;
}

#
# Renders valute info page
#
sub view_valute {

    my $results1 = DBH::db_select("SELECT * FROM BNOTESI WHERE NUMB = $bid ORDER BY INDICATE");
    my $results2 = DBH::db_select("SELECT * FROM FBNOTESL WHERE NUMB = $bid ORDER BY NUMBF");
    my $results3 = DBH::db_select_row("SELECT * FROM BNOTES WHERE NUMB = $bid");
    my $results4 = DBH::db_select("SELECT * FROM BNOTESI WHERE NUMB = $bid");
    my $results5 = DBH::db_select_row("SELECT * FROM COUNTRY WHERE BCODEVAL LIKE \'$cid\'");

    my @loop1;
    foreach my $result ( @$results1 ) {

        my %row = (    
            COUNTRY  => $cid,
            NUMB     => $result->{NUMB},
            INDICATE => $result->{INDICATE}, 
            ACTION_INFO => ACTION_INFO,
            SAVEINFO => $result->{SAVEINFO}
            );

        push(@loop1, \%row);
    }

    my @fake_loop;
    if (scalar(@$results2 == 0) || !access_fake()) {

        my %row = (
            COUNTRY   => 0,
            NUMB      => 0,
            NUMBF     => 0,
            ACTION_FAKE => 0,
            NAMEFALSE => "<b>NOT AVAILABLE</b>" 
            );

        push(@fake_loop, \%row);

    } else {
        foreach my $result ( @$results2 ) {

            my %row = (    
                COUNTRY   => $cid,
                NUMB      => $result->{NUMB},
                NUMBF     => $result->{NUMBF},
                ACTION_FAKE => ACTION_FAKE,
                NAMEFALSE => $result->{NAMEFALSE}
        	);

            push(@fake_loop, \%row);
        }
    }

    my $fidx = 0;
    my $bidx = 0;
    my @front_loop;
    my @back_loop;
    foreach my $result ( @$results4 ) {
        # [14:55:28] Ð ÐµÐ½Ð¸ ÐÑÑÐ²Ð°ÑÐ¾Ð²Ð°: Ð¿ÑÐ¸ ÑÐµÐ·Ð¾Ð»ÑÑÐ¸Ñ 600 Ñ 800 - ÑÐ°Ð·Ð¼ÐµÑ 460 Ñ 225
        # [14:55:51] Ð ÐµÐ½Ð¸ ÐÑÑÐ²Ð°ÑÐ¾Ð²Ð°: Ð¿ÑÐ¸ ÑÐµÐ·Ð¾Ð»ÑÑÐ¸Ñ 1024 Ñ 768 - ÑÐ°Ð·Ð¼ÐµÑ 607 Ñ 300

        my $cx = 1.35;
        my $cy = 1.40;

        if ($result->{XF} && $result->{YF}) {

            my $xf = $result->{XF}*$cx if ($result->{XF} > 0);
            my $yf = $result->{YF}*$cy if ($result->{YF} > 0);
            my %f_row = (
                COUNTRY  => $cid,
                IDX      => $fidx++,
                XF       => $xf,
                YF       => $yf,
                BID      => $result->{NUMB},
                INDICATE => $result->{INDICATE},
                SAVEINFO => $result->{SAVEINFO},
                ACTION_INFO => ACTION_INFO
                );

            push(@front_loop, \%f_row);

        }

        if ($result->{XB} && $result->{YB}) {

            my $xb = $result->{XB}*$cx if ($result->{XB} > 0);
            my $yb = $result->{YB}*$cy if ($result->{YB} > 0);
            my %b_row = (
                COUNTRY  => $cid,
                IDX      => $bidx++,
                XB       => $xb,
                YB       => $yb,
                BID      => $result->{NUMB},
                INDICATE => $result->{INDICATE},
                SAVEINFO => $result->{SAVEINFO},
                ACTION_INFO => ACTION_INFO
                );

            push(@back_loop, \%b_row);

        }

    }

    # do some additional data adjasments
    my $minfo = normalize_text($results3->{MINFO});
    my $maddinfo = normalize_text($results3->{MADDINFO});
    my $muvinfo = normalize_text($results3->{MUVINFO});

    $PAGE_VALUTE->param(protect_loop => \@loop1);
    $PAGE_VALUTE->param(fake_loop => \@fake_loop);
    $PAGE_VALUTE->param(front_zone_loop => \@front_loop);
    $PAGE_VALUTE->param(back_zone_loop => \@back_loop);
    $PAGE_VALUTE->param(COUNTRY => $cid);
    $PAGE_VALUTE->param(COUNTRY_CODE => lc($cid));
    $PAGE_VALUTE->param(BID => $bid);
    $PAGE_VALUTE->param(MINFO => $minfo);
    $PAGE_VALUTE->param('CURRENCY', uc($results5->{CURRENCY}));
    $PAGE_VALUTE->param(NOMINAL => $results3->{NOMINAL});
    $PAGE_VALUTE->param(EMISSION => $results3->{EMISSION});
    $PAGE_VALUTE->param(BFRONT => lc($results3->{BFRONT}));
    $PAGE_VALUTE->param(BBACK => lc($results3->{BBACK}));
    $PAGE_VALUTE->param(MADDINFO => $maddinfo);
    $PAGE_VALUTE->param(MUVINFO => $muvinfo);
    $PAGE_VALUTE->param(ACTION_PREVIEW => ACTION_PREVIEW);

    print $PAGE_VALUTE->output;
}

sub view_about {

    print $PAGE_ABOUT->output;
}

sub view_info {

    return if ($cid eq "" or $bid eq "" or $infoid eq "");

    my $results = DBH::db_select_row("SELECT * FROM BNOTESI WHERE NUMB = $bid AND INDICATE = $infoid");

    my $saveinfo = normalize_text($results->{SAVEINFO});
    #$saveinfo =~ s/%NL%/<br \/>/g;

    my $sinfoadd = normalize_text($results->{SINFOADD});
    #$sinfoadd =~ s/%NL%/<br \/>/g;

    my $pictname = lc($results->{PICTNAME});
    $pictname = "blank.jpg" if ($pictname eq "");

    $PAGE_INFO->param(COUNTRY  => $cid);
    $PAGE_INFO->param(SAVEINFO => $saveinfo);
    $PAGE_INFO->param(SINFOADD => $sinfoadd);
    $PAGE_INFO->param(PICTNAME => $pictname);

    print $PAGE_INFO->output;
}

sub view_fake {

    my $results1 = DBH::db_select("SELECT * FROM FBNOTES WHERE NUMBF = $fbid");
    my $results2 = DBH::db_select_row("SELECT * FROM FBNOTESL WHERE NUMBF = $fbid");
    my $results3 = DBH::db_select_row("SELECT * FROM BNOTES WHERE NUMB = $bid");
    my $results4 = DBH::db_select_row("SELECT * FROM FBNOTESL WHERE NUMB = $bid AND NUMBF = $fbid");
    my $results5 = DBH::db_select("SELECT * FROM FBNOTES WHERE NUMBF = $fbid");

    my @loop1;
    foreach my $result ( @$results1 ) {

        my %row = (    
            FBOX => $result->{FBOX},
            NAMEFALSE => $result->{NAMEFALSE}
            );

        push(@loop1, \%row);
    }

    my $idxf = 0;
    my $idxb = 0;
    my @front_loop;
    my @back_loop;

    foreach my $result ( @$results5 ) {

        if ($result->{FX1} && $result->{FY1}) {

            my $fx1 = $result->{FX1}*1.18;
            my $fy1 = $result->{FY1}*1.10;

            my $fw = ($result->{FX2}*1.20) - ($result->{FX1}*1.20);
            my $fh = ($result->{FY2}*1.20) - ($result->{FY1}*1.20);

            my %f_row = (    
                FW        => $fw,
                FH        => $fh,
                FX1       => $fx1,
                FY1       => $fy1,
                IDX       => $idxf++,
                FBOX      => $result->{FBOX},
                NAMEFALSE => $result->{NAMEFALSE}
                );

            push(@front_loop, \%f_row);

        }

        if ($result->{BX1} && $result->{BY1}) {

            my $bx1 = $result->{BX1}*1.18;
            my $by1 = $result->{BY1}*1.10;

            my $bw = ($result->{BX2}*1.20) - ($result->{BX1}*1.20);
            my $bh = ($result->{BY2}*1.20) - ($result->{BY1}*1.20);

            my %b_row = (
                BW        => $bw,
                BH        => $bh,
                BX1       => $bx1,
                BY1       => $by1,
                IDX       => $idxb++,
                FBOX      => $result->{FBOX},
                NAMEFALSE => $result->{NAMEFALSE}
                );

            push(@back_loop,  \%b_row);
        }
    }

    my $minfo = normalize_text($results4->{MINFO});
    #$minfo =~ s/%NL%/<br \/>/g; 

    $PAGE_FAKE->param(fake_loop => \@loop1);
    $PAGE_FAKE->param(front_zone_loop => \@front_loop);
    $PAGE_FAKE->param(back_zone_loop => \@back_loop);
    $PAGE_FAKE->param(COUNTRY => $cid);
    $PAGE_FAKE->param(COUNTRY_CODE => lc($cid));
    $PAGE_FAKE->param(FBID => $fbid);
    $PAGE_FAKE->param(MINFO => $minfo);
    $PAGE_FAKE->param(NOMINAL => $results3->{NOMINAL});
    $PAGE_FAKE->param(EMISSION => $results3->{EMISSION});
    $PAGE_FAKE->param(FALSEPICSF => lc($results4->{FALSEPICSF}));
    $PAGE_FAKE->param(FALSEPICSB => lc($results4->{FALSEPICSB}));

    $PAGE_FAKE->param(NAMEFALSE => $results4->{NAMEFALSE});

    $PAGE_FAKE->param(ACTION_INFO_FAKE => ACTION_INFO_FAKE);
    $PAGE_FAKE->param(ACTION_PREVIEW_FAKE => ACTION_PREVIEW_FAKE);

    print $PAGE_FAKE->output;
}

sub view_info_fake {

    return if ($cid eq "" or $fbid eq "" or $fbox eq "");

    my $results1 = DBH::db_select_row("SELECT * FROM FBNOTES WHERE NUMBF = $fbid AND FBOX = $fbox");


    my $poriginal = "blank.jpg";
    $poriginal = $results1->{PORIGINAL} if ($results1->{PORIGINAL} ne "");

    my $pfalse = "blank.jpg";
    $pfalse = $results1->{PFALSE} if ($results1->{PFALSE} ne "");

    my $minfoo = normalize_text($results1->{MINFOO});
    #$minfoo =~ s/%NL%/<br \/>/g;

    my $minfof = normalize_text($results1->{MINFOF});
    #$minfof =~ s/%NL%/<br \/>/g;

    $PAGE_INFOFAKE->param(COUNTRY => $cid);
    $PAGE_INFOFAKE->param(PORIGINAL => $poriginal);
    $PAGE_INFOFAKE->param(PFALSE => $pfalse);
    $PAGE_INFOFAKE->param(NAMEFALSE => $results1->{NAMEFALSE});
    $PAGE_INFOFAKE->param(MINFOO => $minfoo);
    $PAGE_INFOFAKE->param(MINFOF => $minfof);

    print $PAGE_INFOFAKE->output;
}

sub view_preview {

    my $results1 = DBH::db_select_row("SELECT * FROM BNOTES WHERE NUMB = $bid");

    if (!$pageid) { 
        $PAGE_PREVIEW->param(IMAGE => $results1->{BFRONT});
    } else {
        $PAGE_PREVIEW->param(IMAGE => $results1->{BBACK});
    }

    $PAGE_PREVIEW->param(COUNTRY => lc($results1->{BCODE}));

    print $PAGE_PREVIEW->output;
}

sub view_preview_fake {

    $PAGE_PREVIEW_FAKE->param(COUNTRY => $cid);
    $PAGE_PREVIEW_FAKE->param(IMAGE   => $fpic);

    print $PAGE_PREVIEW_FAKE->output;
}

sub view_news {

    my $msg = "";
    open(FD, "../../html/bnotes/data/fnew.txt");
    while(<FD>) {
        $_ =~ s/%NL%/<br \/>/g; 
        $msg = $msg . $_; 
    }
    close(FD);

    $PAGE_NEWS->param(NEWS => $msg);

    print $PAGE_NEWS->output;
}

sub view_library {


    my $msg = "";
    open(FD, "../../html/bnotes/data/ffact.txt") || die "Can't open ffact.txt: $!\n";
    while(<FD>) { 
        $_ =~ s/%NL%/<br \/>/g;
        $msg = $msg . $_; 
    }
    close(FD);

    $PAGE_LIBRARY->param(FFACT => $msg);

    print $PAGE_LIBRARY->output;
}

sub view_msg($$) {

    my ($mitle, $msg) = @_;

    $PAGE_MSG->param(ACTION => ACTION_ABOUT);
    $PAGE_MSG->param(TITLE => $mitle);
    $PAGE_MSG->param(MESSAGE => $msg);

    print $PAGE_MSG->output;
}

sub view_message {

    $PAGE_MSG->param(ACTION => ACTION_ABOUT);
    $PAGE_MSG->param(TITLE => $title);
    $PAGE_MSG->param(MESSAGE => $message);

    print $PAGE_MSG->output;
}

sub normalize_text($) {

    my $txt = shift // 'normalize_text';
    # $txt = $txt ? $txt : 'normalize_text';
    $txt =~ s/%NL%/<br \/>/g;
    $txt =~ s/%SP%/\&nbsp\;/g;
    $txt =~ s/%TAB%/\&nbsp\;\&nbsp\;\&nbsp\;\&nbsp\;/g;
    
    return $txt;
}

# returns true for actions that do not require authentication
sub needs_top {

    return 1 if $action =~ ACTION_ABOUT;
    return 1 if ($action =~ ACTION_LOGIN or $action =~ ACTION_LOGOUT);
    return 1 if ($action =~ ACTION_NEWS or $action =~ ACTION_LIBRARY);
    return 0;
}


sub needs_top_small {

    return 1 if ($action =~ ACTION_FIND or $action =~ ACTION_COUNTRIES);
    return 1 if ($action =~ ACTION_VALUTE or $action =~ ACTION_FAKE);
    return 0;
}

sub needs_bottom {

    return needs_top() || needs_top_small() ? 1 : 0;
}

sub needs_bottom_complicated {

    return 0 if ($action =~ ACTION_INFO or $action =~ ACTION_INFO_FAKE);
    return 0 if ($action =~ ACTION_PREVIEW or $action =~ ACTION_PREVIEW_FAKE);
    return 1;
}

sub access_fake {

    my $allow_fake_access = 0;
    
    if ($filter_fake) {
        if ($access & DBH::control('FOX')) {
            $allow_fake_access = 1;
        }
    } else {
        $allow_fake_access = 1;
    }
    
    return $allow_fake_access;
}

sub filter_cid {

    if (access_denied($access, $cid)) {

        $cid = open_cid($access);
    }
}

sub access_denied($$) {

    my ($droit, $clef) = @_;

    if (!$clef) {                       return 0; }
    if ($droit & DBH::control($clef)) { return 0; }
    else {                              return 1; }
}

sub open_cid {

    my %code = DBH::control('all');
    while( my ($clef, $value) = each(%code) ) {

        if ($access & $value) {

            return $clef;
        }
    }

    return 0;
}

sub sql_access_filter($) {

    my $droit = shift;

    my $where = '';
    my %code = DBH::control('all');
    while( my ($clef, $value) = each(%code) ) {
#    foreach my $clef (keys(DBH::control('all'))) {
        if ($droit & $value) {

            if ($where) {

                $where = "$where OR BCODEVAL LIKE \"$clef\"";
            } else {

                $where = "WHERE BCODEVAL LIKE \"$clef\"";
            }    
        }
    }

    return $where;
}

sub logout {

    destroy_session();
    view_msg("LOG OUT", "$client HAS SUCCESSFULLY LOGGED OUT THE SYSTEM!");
}

sub login {

    if (init_session() == STATUS_USER) { # it should not happen
        return STATUS_USER;
    }
    
    my $title = "LOG IN";
    $message = "LOGIN FAILED - TRY AGAIN OR CONTACT ADMINISTRATOR AT ".CONTACT_ADDRESS;

    my $user = $cgi->param('user') // 0;
    my $pass = $cgi->param('password') // 0;
    
    if (!$user || !$pass) {

        view_message();
        return STATUS_BAD_INPUT;
    }

    my $result = DBH::auth_user($user, $pass);
    if ($result < 0) { # login failed

        view_message();
        return STATUS_LOGIN_FAILED;
    } else { # load user profile if name/pass match

        $session->expire(DBH::SESSION_EXPIRATION);
        $session->param("~user", $user);
        $session->param("~logged-in", 1);
        $session->param("~access", $result);

        $client = $user;
        $access = $result;
        $message = "$client HAS SUCCESSFULLY LOGGED IN THE SYSTEM";

        view_message();
        DBH::db_update_column('ACTIVE', 1, $client);
        return STATUS_LOGIN_SUCCESS;
    }
}

sub init_session {

    if ($session->param("~logged-in")) {

        $client = $session->param("~user");
        $access = $session->param("~access");
        
        return STATUS_USER;
    }

    return STATUS_GUEST;
}


# EOF


